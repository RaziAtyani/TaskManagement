using System.Collections.Generic;
using System.Threading.Tasks;
using TASK_2.DTOs;
using TASK_2.Models;
using TASK_2.Repositories;
using TASK_2.Common;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;


namespace TASK_2.Services
{
    public class ProjectService : IProjectService
    {
        private readonly IProjectRepository _projectRepository;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public ProjectService(IProjectRepository projectRepository, IHttpContextAccessor httpContextAccessor)
        {
            _projectRepository = projectRepository;
            _httpContextAccessor = httpContextAccessor;
        }


        public async Task<OperationResult<ProjectDto>> CreateProjectAsync(ProjectDtoRequest projectDto)
        {
            var userIdClaim = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userIdClaim) || !int.TryParse(userIdClaim, out int userId))
            {
                return new OperationResult<ProjectDto>(401, "Unauthorized user.");
            }

            var project = new Project
            {
                Name = projectDto.Name,
                Description = projectDto.Description,
                RegistrationId = userId // Set the RegistrationId to the ID of the current user
            };

            await _projectRepository.AddAsync(project);

            var resultDto = new ProjectDto
            {
                Id = project.Id, // Include the ID generated by the database
                Name = project.Name,
                Description = project.Description
            };

            return new OperationResult<ProjectDto>(201, "Project created successfully.", resultDto);
        }



        public async Task<OperationResult<ProjectDto>> GetProjectAsync(int projectId)
        {
            var project = await _projectRepository.GetProjectWithSubProjectsAsync(projectId);
            if (project == null)
            {
                return new OperationResult<ProjectDto>(404, "Project not found.");
            }

            var projectDto = new ProjectDto
            {
                Name = project.Name,
                Description = project.Description
            };

            return new OperationResult<ProjectDto>(200, "Project retrieved successfully.", projectDto);
        }

        public async Task<OperationResult<IEnumerable<ProjectDto>>> GetAllProjectsAsync()
        {
            var projects = await _projectRepository.GetProjectsWithSubProjectsAsync();
            var projectDtos = projects.Select(p => new ProjectDto
            {
                Name = p.Name,
                Description = p.Description
            });

            return new OperationResult<IEnumerable<ProjectDto>>(200, "Projects retrieved successfully.", projectDtos);
        }

        public async Task<OperationResult<ProjectDto>> UpdateProjectAsync(int projectId, ProjectDto projectDto)
        {
            var project = await _projectRepository.GetByIdAsync(projectId);
            if (project == null)
            {
                return new OperationResult<ProjectDto>(404, "Project not found.");
            }

            project.Name = projectDto.Name;
            project.Description = projectDto.Description;

            await _projectRepository.UpdateAsync(project);

            return new OperationResult<ProjectDto>(200, "Project updated successfully.", projectDto);
        }

        public async Task<OperationResult> DeleteProjectAsync(int projectId)
        {
            var project = await _projectRepository.GetByIdAsync(projectId);
            if (project == null)
            {
                return new OperationResult(404, "Project not found.");
            }

            await _projectRepository.DeleteAsync(projectId);

            return new OperationResult(200, "Project deleted successfully.");
        }

        public async Task<OperationResult<IEnumerable<ProjectDto>>> GetSubProjectsByProjectIdAsync(int projectId)
        {
            var subProjects = await _projectRepository.GetSubProjectsByProjectIdAsync(projectId);
            var subProjectDtos = subProjects.Select(sp => new ProjectDto
            {
                Name = sp.Name,
                Description = sp.Description
            });

            return new OperationResult<IEnumerable<ProjectDto>>(200, "Sub-projects retrieved successfully.", subProjectDtos);
        }
    }
}
